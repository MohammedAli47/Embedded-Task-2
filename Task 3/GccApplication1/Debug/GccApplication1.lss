
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000196  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073e  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033c  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "stdTypes.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	u8 arrOfNumbers[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	u8 numberDisplayed = 50;
    DDRA = 0xfc;
  a8:	8c ef       	ldi	r24, 0xFC	; 252
  aa:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  ac:	1b ba       	out	0x1b, r1	; 27
	DDRC = 0xfe;
  ae:	8e ef       	ldi	r24, 0xFE	; 254
  b0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  b2:	15 ba       	out	0x15, r1	; 21
	DDRD = 0x03;
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  b8:	12 ba       	out	0x12, r1	; 18
#include "stdTypes.h"

int main(void)
{
	u8 arrOfNumbers[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
	u8 numberDisplayed = 50;
  ba:	42 e3       	ldi	r20, 0x32	; 50
	DDRC = 0xfe;
	PORTC = 0x00;
	DDRD = 0x03;
	PORTD = 0x00;
    while (1) {
		u8 rightSeg = numberDisplayed % 10, leftSeg = (numberDisplayed / 10) % 10;
  bc:	8d ec       	ldi	r24, 0xCD	; 205
  be:	48 9f       	mul	r20, r24
  c0:	21 2d       	mov	r18, r1
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	96 95       	lsr	r25
  c8:	96 95       	lsr	r25
  ca:	96 95       	lsr	r25
  cc:	99 0f       	add	r25, r25
  ce:	39 2f       	mov	r19, r25
  d0:	33 0f       	add	r19, r19
  d2:	33 0f       	add	r19, r19
  d4:	93 0f       	add	r25, r19
  d6:	34 2f       	mov	r19, r20
  d8:	39 1b       	sub	r19, r25
  da:	93 2f       	mov	r25, r19
  dc:	26 95       	lsr	r18
  de:	26 95       	lsr	r18
  e0:	26 95       	lsr	r18
  e2:	28 9f       	mul	r18, r24
  e4:	81 2d       	mov	r24, r1
  e6:	11 24       	eor	r1, r1
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	86 95       	lsr	r24
  ee:	88 0f       	add	r24, r24
  f0:	38 2f       	mov	r19, r24
  f2:	33 0f       	add	r19, r19
  f4:	33 0f       	add	r19, r19
  f6:	83 0f       	add	r24, r19
  f8:	28 1b       	sub	r18, r24
  fa:	82 2f       	mov	r24, r18
		u8 sw1_pressed = (PINA >> 0) & 1;
  fc:	39 b3       	in	r19, 0x19	; 25
		u8 sw2_pressed = (PINA >> 1) & 1;
  fe:	29 b3       	in	r18, 0x19	; 25
 100:	26 95       	lsr	r18
 102:	21 70       	andi	r18, 0x01	; 1
		if (sw1_pressed && (numberDisplayed < 99)) // Only Switch 1 is Pressed
 104:	30 ff       	sbrs	r19, 0
 106:	0d c0       	rjmp	.+26     	; 0x122 <main+0xa0>
 108:	43 36       	cpi	r20, 0x63	; 99
 10a:	58 f4       	brcc	.+22     	; 0x122 <main+0xa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	99 ef       	ldi	r25, 0xF9	; 249
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	81 50       	subi	r24, 0x01	; 1
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e0 40       	sbci	r30, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x90>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x9a>
 11c:	00 00       	nop
		{
			_delay_ms(40);
			numberDisplayed++;
 11e:	4f 5f       	subi	r20, 0xFF	; 255
 120:	cd cf       	rjmp	.-102    	; 0xbc <main+0x3a>
		} else if (sw2_pressed && (numberDisplayed > 0)) // Only Switch 2 is Pressed
 122:	22 23       	and	r18, r18
 124:	69 f0       	breq	.+26     	; 0x140 <main+0xbe>
 126:	44 23       	and	r20, r20
 128:	59 f0       	breq	.+22     	; 0x140 <main+0xbe>
 12a:	ff ef       	ldi	r31, 0xFF	; 255
 12c:	29 ef       	ldi	r18, 0xF9	; 249
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f1 50       	subi	r31, 0x01	; 1
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xae>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xb8>
 13a:	00 00       	nop
		{
			_delay_ms(40);
			numberDisplayed--;
 13c:	41 50       	subi	r20, 0x01	; 1
 13e:	be cf       	rjmp	.-132    	; 0xbc <main+0x3a>
		} else
		{
			PORTD |=  (1<<0);				// Enable right segment
 140:	22 b3       	in	r18, 0x12	; 18
 142:	21 60       	ori	r18, 0x01	; 1
 144:	22 bb       	out	0x12, r18	; 18
			PORTD &= ~(1<<1);				// Disable left segment
 146:	22 b3       	in	r18, 0x12	; 18
 148:	2d 7f       	andi	r18, 0xFD	; 253
 14a:	22 bb       	out	0x12, r18	; 18
			PORTC = arrOfNumbers[rightSeg];	// Display on right segment
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e9 0f       	add	r30, r25
 156:	f1 1d       	adc	r31, r1
 158:	90 81       	ld	r25, Z
 15a:	95 bb       	out	0x15, r25	; 21
 15c:	ef e9       	ldi	r30, 0x9F	; 159
 15e:	ff e0       	ldi	r31, 0x0F	; 15
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xde>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xe4>
 166:	00 00       	nop
			_delay_ms(2);
			PORTD &= ~(1<<0);				// Disable right segment
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9e 7f       	andi	r25, 0xFE	; 254
 16c:	92 bb       	out	0x12, r25	; 18
			PORTD |=  (1<<1);				// Enable left segment
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	92 60       	ori	r25, 0x02	; 2
 172:	92 bb       	out	0x12, r25	; 18
			PORTC = arrOfNumbers[leftSeg];	// Display on left segment
 174:	e1 e0       	ldi	r30, 0x01	; 1
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	e8 0f       	add	r30, r24
 17e:	f1 1d       	adc	r31, r1
 180:	80 81       	ld	r24, Z
 182:	85 bb       	out	0x15, r24	; 21
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x106>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x10c>
 18e:	00 00       	nop
 190:	95 cf       	rjmp	.-214    	; 0xbc <main+0x3a>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
